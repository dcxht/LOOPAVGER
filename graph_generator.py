"""
Respiratory Data Processor
Graph Generator - Creates visualizations from Data Processor output files
"""

import os
import re
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def generate_plots_from_file(input_file_path, output_dir):
    """
    Generate and save plots from a Data Processor output file
    
    Parameters:
    input_file_path - Path to the Excel file generated by Data Processor
    output_dir - Directory to save the plot images
    
    Returns:
    Dictionary with results: {'saved_count': number of plots saved, 'plot_paths': list of paths}
    """
    results = {
        'saved_count': 0,
        'plot_paths': [],
        'error': None
    }
    
    try:
        # Load data from the Excel file
        excel_file = pd.ExcelFile(input_file_path)
        
        # Create the base filename for saving plots
        base_name = os.path.splitext(os.path.basename(input_file_path))[0]
        
        # Read and clean sheets
        try:
            # Raw Data sheet
            raw_data = pd.read_excel(excel_file, sheet_name="Raw Data")
            # Convert any non-numeric values to NaN
            for col in raw_data.columns:
                raw_data[col] = pd.to_numeric(raw_data[col], errors='coerce')
            
            # Absolute Volume Data sheet
            absolute_data = pd.read_excel(excel_file, sheet_name="Absolute Volume Data")
            # Skip any rows that contain the word "Note" or are empty
            absolute_data = absolute_data[~absolute_data.astype(str).apply(lambda x: x.str.contains('Note', case=False, na=False)).any(axis=1)]
            # Convert any non-numeric values to NaN
            for col in absolute_data.columns:
                absolute_data[col] = pd.to_numeric(absolute_data[col], errors='coerce')
            
            # Normalized Average Data sheet
            try:
                normalized_data = pd.read_excel(excel_file, sheet_name="Normalized Average Data")
                # Skip any rows that contain the word "Note" or are empty
                normalized_data = normalized_data[~normalized_data.astype(str).apply(lambda x: x.str.contains('Note', case=False, na=False)).any(axis=1)]
                # Convert any non-numeric values to NaN
                for col in normalized_data.columns:
                    normalized_data[col] = pd.to_numeric(normalized_data[col], errors='coerce')
            except:
                normalized_data = None
            
            # Averages sheet
            try:
                averages_data = pd.read_excel(excel_file, sheet_name="Averages")
                # Skip any rows that contain the word "Average TLC" or are empty
                averages_data = averages_data[~averages_data.astype(str).apply(lambda x: x.str.contains('Average TLC', case=False, na=False)).any(axis=1)]
                # Convert any non-numeric values to NaN
                for col in averages_data.columns:
                    averages_data[col] = pd.to_numeric(averages_data[col], errors='coerce')
            except:
                averages_data = None
            
            # Create and save plots
            # 1. Raw Data plot
            raw_plot_path = create_raw_data_plot(raw_data, output_dir, base_name)
            if raw_plot_path:
                results['saved_count'] += 1
                results['plot_paths'].append(raw_plot_path)
            
            # 2. Absolute Volume plot
            abs_plot_path = create_absolute_volume_plot(absolute_data, output_dir, base_name)
            if abs_plot_path:
                results['saved_count'] += 1
                results['plot_paths'].append(abs_plot_path)
            
            # 3. Normalized Average plot
            if normalized_data is not None:
                norm_plot_path = create_normalized_avg_plot(normalized_data, output_dir, base_name)
                if norm_plot_path:
                    results['saved_count'] += 1
                    results['plot_paths'].append(norm_plot_path)
            
            # 4. Normalized Average with Error Bars
            if normalized_data is not None and averages_data is not None:
                # Get average TLC for converting error bars
                avg_tlc = extract_average_tlc(excel_file)
                
                err_plot_path = create_normalized_avg_with_errors_plot(
                    normalized_data, averages_data, avg_tlc, output_dir, base_name
                )
                if err_plot_path:
                    results['saved_count'] += 1
                    results['plot_paths'].append(err_plot_path)
            
        except Exception as e:
            results['error'] = f"Error generating plots: {str(e)}"
            
    except Exception as e:
        results['error'] = f"Error loading data: {str(e)}"
    
    return results

def extract_average_tlc(excel_file):
    """
    Extract the average TLC value from the Excel file
    
    Parameters:
    excel_file - Pandas ExcelFile object
    
    Returns:
    Float value for average TLC or None if not found
    """
    try:
        # First try Normalized Average Data sheet
        all_cells = pd.read_excel(excel_file, sheet_name="Normalized Average Data", header=None)
        # Find cells containing "average TLC"
        avg_tlc_cells = all_cells[all_cells.applymap(lambda x: isinstance(x, str) and 'average TLC' in str(x).lower()).any(axis=1)]
        
        if not avg_tlc_cells.empty:
            # Find the numeric value using regex
            avg_tlc_text = avg_tlc_cells.iloc[0].astype(str).str.cat(sep=' ')
            avg_tlc_match = re.search(r'(\d+\.\d+)', avg_tlc_text)
            avg_tlc = float(avg_tlc_match.group(1)) if avg_tlc_match else None
            return avg_tlc
        
        # Try Individual Data sheet as fallback
        ind_data = pd.read_excel(excel_file, sheet_name="Individual Data", header=None)
        avg_tlc_cells = ind_data[ind_data.applymap(lambda x: isinstance(x, str) and 'average tlc' in str(x).lower()).any(axis=1)]
        
        if not avg_tlc_cells.empty:
            # Find the next cell which should be the value
            avg_tlc_row = avg_tlc_cells.index[0]
            for col in range(ind_data.shape[1]):
                cell_val = ind_data.iloc[avg_tlc_row, col]
                if isinstance(cell_val, (int, float)) or (isinstance(cell_val, str) and cell_val.replace('.', '', 1).isdigit()):
                    return float(cell_val)
                    
            # If not found by examining cells, try with regex
            avg_tlc_text = ind_data.iloc[avg_tlc_row].astype(str).str.cat(sep=' ')
            avg_tlc_match = re.search(r'(\d+\.\d+)', avg_tlc_text)
            if avg_tlc_match:
                return float(avg_tlc_match.group(1))
    except:
        pass
    
    return None

def create_raw_data_plot(raw_data, output_dir, base_name):
    """
    Create and save the raw data flow-volume plot
    
    Parameters:
    raw_data - DataFrame with raw volume and flow data
    output_dir - Directory to save the plot
    base_name - Base filename for the output file
    
    Returns:
    String path to the saved plot or None if failed
    """
    try:
        plt.figure(figsize=(10, 8))
        vol_cols = [col for col in raw_data.columns if 'Vol' in col]
        flow_cols = [col for col in raw_data.columns if 'Flow' in col]
        
        colors = plt.cm.viridis(np.linspace(0, 0.9, len(vol_cols)))
        
        for i, (vol_col, flow_col) in enumerate(zip(vol_cols, flow_cols)):
            # Remove NaN values before plotting
            plot_data = raw_data[[vol_col, flow_col]].dropna()
            if not plot_data.empty:
                subject_match = re.search(r'(\d{2,7}|\d+)$', vol_col)
                subject_id = subject_match.group(1) if subject_match else f"Subject {i+1}"
                plt.plot(plot_data[vol_col], plot_data[flow_col], color=colors[i], label=subject_id)
        
        plt.xlabel('Volume (L)')
        plt.ylabel('Flow (L/s)')
        plt.title('Raw Flow-Volume Loops')
        plt.legend(title="Subject ID", loc='best')
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.axhline(y=0, color='k', linestyle='-', alpha=0.3)
        plt.axvline(x=0, color='k', linestyle='-', alpha=0.3)
        
        # Set axis limits as requested
        plt.xlim(0, 10)
        plt.ylim(-8, 12)
        
        plt.tight_layout()
        
        # Save the plot
        plot_path = os.path.join(output_dir, f"{base_name}_Raw_Flow_Volume.png")
        plt.savefig(plot_path, dpi=300, bbox_inches='tight')
        plt.close()
        return plot_path
    except Exception as e:
        print(f"Error creating raw data plot: {e}")
        return None

def create_absolute_volume_plot(absolute_data, output_dir, base_name):
    """
    Create and save the absolute volume flow-volume plot
    
    Parameters:
    absolute_data - DataFrame with absolute volume and flow data
    output_dir - Directory to save the plot
    base_name - Base filename for the output file
    
    Returns:
    String path to the saved plot or None if failed
    """
    try:
        plt.figure(figsize=(10, 8))
        vol_cols = [col for col in absolute_data.columns if 'Vol' in col]
        flow_cols = [col for col in absolute_data.columns if 'Flow' in col]
        
        colors = plt.cm.viridis(np.linspace(0, 0.9, len(vol_cols)))
        
        for i, (vol_col, flow_col) in enumerate(zip(vol_cols, flow_cols)):
            # Remove NaN values before plotting
            plot_data = absolute_data[[vol_col, flow_col]].dropna()
            if not plot_data.empty:
                subject_match = re.search(r'(\d{2,7}|\d+)$', vol_col)
                subject_id = subject_match.group(1) if subject_match else f"Subject {i+1}"
                plt.plot(plot_data[vol_col], plot_data[flow_col], color=colors[i], label=subject_id)
        
        plt.xlabel('Volume (L)')
        plt.ylabel('Flow (L/s)')
        plt.title('Absolute Volume Flow-Volume Loops')
        plt.legend(title="Subject ID", loc='best')
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.axhline(y=0, color='k', linestyle='-', alpha=0.3)
        plt.axvline(x=0, color='k', linestyle='-', alpha=0.3)
        
        # Set axis limits as requested
        plt.xlim(0, 10)
        plt.ylim(-8, 12)
        
        plt.tight_layout()
        
        # Save the plot
        plot_path = os.path.join(output_dir, f"{base_name}_Absolute_Flow_Volume.png")
        plt.savefig(plot_path, dpi=300, bbox_inches='tight')
        plt.close()
        return plot_path
    except Exception as e:
        print(f"Error creating absolute volume plot: {e}")
        return None

def create_normalized_avg_plot(normalized_data, output_dir, base_name):
    """
    Create and save the normalized average flow-volume plot
    
    Parameters:
    normalized_data - DataFrame with normalized average data
    output_dir - Directory to save the plot
    base_name - Base filename for the output file
    
    Returns:
    String path to the saved plot or None if failed
    """
    try:
        if 'Normalized Average Volume' in normalized_data.columns and 'Average Flow' in normalized_data.columns:
            plt.figure(figsize=(10, 8))
            
            # Remove NaN values before plotting
            plot_data = normalized_data[['Normalized Average Volume', 'Average Flow']].dropna()
            if not plot_data.empty:
                plt.plot(plot_data['Normalized Average Volume'], 
                      plot_data['Average Flow'], 
                      'b-', linewidth=2, label='Average')
            
            plt.xlabel('Volume (L)')
            plt.ylabel('Flow (L/s)')
            plt.title('Normalized Average Flow-Volume Loop')
            plt.legend(loc='best')
            plt.grid(True, linestyle='--', alpha=0.7)
            plt.axhline(y=0, color='k', linestyle='-', alpha=0.3)
            plt.axvline(x=0, color='k', linestyle='-', alpha=0.3)
            
            # Set axis limits as requested
            plt.xlim(0, 10)
            plt.ylim(-8, 12)
            
            plt.tight_layout()
            
            # Save the plot
            plot_path = os.path.join(output_dir, f"{base_name}_Normalized_Average.png")
            plt.savefig(plot_path, dpi=300, bbox_inches='tight')
            plt.close()
            return plot_path
    except Exception as e:
        print(f"Error creating normalized average plot: {e}")
    return None

def create_normalized_avg_with_errors_plot(normalized_data, averages_data, avg_tlc, output_dir, base_name):
    """
    Create and save the normalized average flow-volume plot with error bars
    
    Parameters:
    normalized_data - DataFrame with normalized average data
    averages_data - DataFrame with SEM data
    avg_tlc - Float with average TLC value for conversion
    output_dir - Directory to save the plot
    base_name - Base filename for the output file
    
    Returns:
    String path to the saved plot or None if failed
    """
    try:
        if ('Normalized Average Volume' in normalized_data.columns and 
            'Average Flow' in normalized_data.columns and 
            'Volume StdDev' in normalized_data.columns and 
            'Flow StdDev' in normalized_data.columns):
            
            plt.figure(figsize=(10, 8))
            
            # Clean data for plotting
            plot_data = normalized_data[['Normalized Average Volume', 'Average Flow', 'Volume StdDev', 'Flow StdDev']].dropna()
            
            if not plot_data.empty:
                # Plot the main line (average)
                plt.plot(plot_data['Normalized Average Volume'], plot_data['Average Flow'], 
                       'k-', linewidth=2, label='Average')
                
                # Create standard error shaded areas
                # Separate inspiration and expiration phases
                insp_idx = plot_data['Average Flow'] >= 0
                exp_idx = plot_data['Average Flow'] < 0
                
                # Inspiration phase (positive flow)
                if insp_idx.any():
                    insp_vol = plot_data.loc[insp_idx, 'Normalized Average Volume']
                    insp_flow = plot_data.loc[insp_idx, 'Average Flow']
                    insp_vol_err = plot_data.loc[insp_idx, 'Volume StdDev']
                    insp_flow_err = plot_data.loc[insp_idx, 'Flow StdDev']
                    
                    # Create upper and lower bounds for volume and flow
                    insp_vol_upper = insp_vol + insp_vol_err
                    insp_vol_lower = insp_vol - insp_vol_err
                    insp_flow_upper = insp_flow + insp_flow_err
                    insp_flow_lower = insp_flow - insp_flow_err
                    
                    # Plot shaded area for inspiration phase
                    plt.fill_between(insp_vol, insp_flow_lower, insp_flow_upper, 
                                   color='black', alpha=0.2)
                    
                    # Overlay dashed lines for upper and lower bounds
                    plt.plot(insp_vol, insp_flow_upper, 'k--', linewidth=1, alpha=0.5)
                    plt.plot(insp_vol, insp_flow_lower, 'k--', linewidth=1, alpha=0.5)
                
                # Expiration phase (negative flow)
                if exp_idx.any():
                    exp_vol = plot_data.loc[exp_idx, 'Normalized Average Volume']
                    exp_flow = plot_data.loc[exp_idx, 'Average Flow']
                    exp_vol_err = plot_data.loc[exp_idx, 'Volume StdDev']
                    exp_flow_err = plot_data.loc[exp_idx, 'Flow StdDev']
                    
                    # Create upper and lower bounds for volume and flow
                    exp_vol_upper = exp_vol + exp_vol_err
                    exp_vol_lower = exp_vol - exp_vol_err
                    exp_flow_upper = exp_flow + exp_flow_err
                    exp_flow_lower = exp_flow - exp_flow_err
                    
                    # Plot shaded area for expiration phase
                    plt.fill_between(exp_vol, exp_flow_lower, exp_flow_upper, 
                                   color='black', alpha=0.2)
                    
                    # Overlay dashed lines for upper and lower bounds
                    plt.plot(exp_vol, exp_flow_upper, 'k--', linewidth=1, alpha=0.5)
                    plt.plot(exp_vol, exp_flow_lower, 'k--', linewidth=1, alpha=0.5)
            
            plt.xlabel('Volume (L)')
            plt.ylabel('Flow (L/s)')
            plt.title('Normalized Average Flow-Volume Loop with Standard Error')
            
            # Set axis limits as requested
            plt.xlim(0, 10)
            plt.ylim(-8, 12)
            
            plt.grid(True, linestyle='--', alpha=0.7)
            plt.axhline(y=0, color='k', linestyle='-', alpha=0.3)
            plt.axvline(x=0, color='k', linestyle='-', alpha=0.3)
            plt.tight_layout()
            
            # Save the plot
            plot_path = os.path.join(output_dir, f"{base_name}_Normalized_Average_with_StdError.png")
            plt.savefig(plot_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            return plot_path
    except Exception as e:
        print(f"Error creating normalized average with errors plot: {e}")
    return None